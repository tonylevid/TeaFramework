<?php

/**
 * TeaModel class file.
 *
 * @author tonylevid <tonylevid@gmail.com>
 * @link http://www.tframework.com/
 * @copyright http://tonylevid.com/
 * @license http://www.tframework.com/license/
 * @package base
 */
class TeaModel extends TeaCommon {

    const HAS_ONE = 1;
    const BELONGS_TO = 2;
    const HAS_MANY = 3;
    const MANY_MANY = 4;

    /**
     * Class config.
     * @var array
     */
    public static $config = array(
        'arrayResult' => true,
        'defaultConnection' => 'default',
        'connections' => array(
            'default' => array(
                'dsn' => 'mysql:host=127.0.0.1;dbname=test;',
                'username' => 'root',
                'password' => '123456',
                'charset' => 'utf8', // if charset has been defined in dsn, this will be invalid.
                'tablePrefix' => 'tb_',
                'tableAliasMark' => '->',
                'persistent' => true,
                'emulatePrepare' => true,
                'autoConnect' => true,
            )
        )
    );

    /**
     * Table column names.
     * @var array
     */
    private $_colNames = array();
    
    /**
     * Primary key column names.
     * @var array
     */
    private $_pkColNames = array();

    /**
     * Addon criteria array generated by method TeaModel::criterias() or TeaModel::relations().
     * @var array
     */
    private $_addonCriteriaArr = array();

    /**
     * Fetch array result or not.
     * @var boolean
     */
    private $_arrayResult = false;

    /**
     * Constructor, set class config.
     */
    public function __construct() {
        $this->setClassConfig(__CLASS__);
        $this->_arrayResult = self::$config['arrayResult'];
    }

    /**
     * Magic method __get.
     * This method is for getting column value.
     * @param string $name Column value.
     * @return mixed Column value.
     */
    public function __get($name) {
        if (isset($this->{$name})) {
            return $this->{$name};
        } else {
            $trace = debug_backtrace();
            trigger_error("Undefined property via __get(): {$name} in {$trace[0]['file']} on line {$trace[0]['line']}");
            return null;
        }
    }

    /**
     * Magic method __set.
     * This method is for setting column value.
     * @param string $name Column name.
     * @param mixed $value Column value.
     */
    public function __set($name, $value) {
        $this->{$name} = $value;
    }
    
    /**
     * Hook method.
     * Return the table name for this model. Defaults to the lowercased and underscored model name.
     * @return string Table name.
     */
    public function tableName() {
        $modelName = get_class($this);
        return StringHelper::camelToUnderscore(preg_replace('/(.+)Model/', '$1', $modelName));
    }

    /**
     * Hook method.
     * Return common criterias map. Defaults to empty array.
     * <pre>
     * The array will be like this:
     * array(
     *     'criteriaOne' => array(
     *         'join' => array('left:bar' => array('bar.pid' => 'foo.id')),
     *         'where' => array('foo.id:lte' => 10)
     *     ),
     *     'criteriaTwo' => array(
     *         'where' => array('blabla.id:between' => array(10, 100))
     *     ),
     *     'criteriaThree' => $this->getDbCriteria()->where(array('foo.id:lte' => 5))
     *     ...
     * )
     * </pre>
     * @return array Criterias map.
     */
    public function criterias() {
        return array();
    }

    /**
     * Query with a common criteria.
     * @param string $criteriaName,... Unlimited criteria key in the returned array of method TeaModel::criterias().
     * @return $this
     */
    public function withCriteria() {
        $criterias = $this->criterias();
        $criteriaNames = func_get_args();
        foreach ($criteriaNames as $criteriaName) {
            if (array_key_exists($criteriaName, $criterias)) {
                $addonCriteria = $criterias[$criteriaName];
                if ($addonCriteria instanceof TeaDbCriteria) {
                    $this->_addonCriteriaArr = ArrayHelper::mergeArray($this->_addonCriteriaArr, $addonCriteria->criteriaArr);
                } else if (is_array($addonCriteria) && !empty($addonCriteria)) {
                    $this->_addonCriteriaArr = ArrayHelper::mergeArray($this->_addonCriteriaArr, $addonCriteria);
                }
            }
        }
        return $this;
    }

    /**
     * Hook method.
     * This is a handy method of TeaModel::criterias().
     * Return common joins map. Defaults to empty array.
     * <pre>
     * The array will be like this:
     * array(
     *     'joinOne' => array(
     *         'left:bar' => array('bar.pid' => 'foo.id'),
     *     ),
     *     'joinTwo' => array(
     *         'bla' => array('bla.pid' => 'foo.id'),
     *     ),
     *     'joinThree' => $this->getDbCriteria()->join(array('right:bla' => array('bla.pid' => 'foo.id')))
     *     ...
     * )
     * </pre>
     * @return array Joins map.
     */
    public function joins() {
        return array();
    }

    /**
     * Query with a common join.
     * @param string $joinName,... Unlimited join key in the returned array of method TeaModel::joins().
     * @return $this
     */
    public function withJoin() {
        $joins = $this->joins();
        $joinNames = func_get_args();
        foreach ($joinNames as $joinName) {
            if (array_key_exists($joinName, $joins)) {
                $addonJoin = $joins[$joinName];
                if ($addonJoin instanceof TeaDbCriteria) {
                    $joinCriteria = array();
                    if (isset($addonJoin->criteriaArr['join'])) {
                        $joinCriteria = array('join' => $addonJoin->criteriaArr['join']);
                    }
                    $this->_addonCriteriaArr = ArrayHelper::mergeArray($this->_addonCriteriaArr, $joinCriteria);
                } else if (is_array($addonJoin) && !empty($addonJoin)) {
                    $this->_addonCriteriaArr = ArrayHelper::mergeArray($this->_addonCriteriaArr, array('join' => $addonJoin));
                }
            }
        }
        return $this;
    }

    /**
     * Get real table name. 
     * If Table name is '{{table_name}}', and table prefix is 'tbl_'. This will return 'tbl_table_name'.
     * @return string Real table name
     */
    public function getTableName() {
        return $this->getDbSqlBuilder()->getTableName($this->tableName());
    }

    /**
     * Get table alias name.
     * If $tblName is '{{table_name->A}}', This will return 'A'.
     * @param string $tblName Table name.
     * @return string Table alias name.
     */
    public function getTableAlias() {
        return $this->getDbSqlBuilder()->getTableAlias($this->tableName());
    }

    /**
     * Switch fetch style to array or not.
     * @param bool $status Fetch array or not.
     * @return $this
     */
    public function arrayResult($status) {
        $this->_arrayResult = $status ? true : false;
        return $this;
    }
    
    /**
     * Insert record(s).
     * @param mixed $vals Value indicates the inserted data.
     * <pre>
     * There are three types of the vals:
     * One dimensional array:
     * array(col1Val, col2Val, colNVal, ...)
     * or 
     * array(
     *     'col1Name' => col1Val, 
     *     'col2Name' => col2Val, 
     *     'colNName' => colNVal, 
     *     ...
     * )
     * 
     * Two dimensional array:
     * array(
     *     array(col1Val, col2Val, colNVal),
     *     array(col1Val, col2Val, colNVal),
     *     ...
     * )
     * or
     * array(
     *     array('col1Name' => col1Val, 'col2Name' => col2Val, 'colNName' => colNVal),
     *     array('col1Name' => col1Val, 'col2Name' => col2Val, 'colNName' => colNVal),
     *     ... // all keys should be same as the first element array or just leave the keys of other elements empty except first.
     * )
     * 
     * Select sql string, could be generated by TeaDbSqlBuilder::select():
     * 'SELECT * FROM `table`'
     * </pre>
     * @param array $duplicateUpdate Update data on duplicate key occurs.
     * <pre>
     * The values will be like this:
     * array(
     *     'colName1' => colVal1,
     *     'colName2' => colVal2,
     *     ...
     * )
     * </pre>
     * @return bool
     */
    public function insert($vals = array(), $duplicateUpdate = array()) {
        if (empty($vals)) {
            $vals = $duplicateUpdate = $this->getSetRecord();
        }
        $criteria = is_array($duplicateUpdate) && !empty($duplicateUpdate) ? array('duplicateUpdate' => $duplicateUpdate) : null;
        $sql = $this->getDbSqlBuilder()->insert($this->tableName(), $vals, $this->getProperCriteria($criteria));
        $this->onBeforeSave();
        if ($this->getDbQuery()->query($sql)->getRowCount() > 0) {
            $this->onAfterSave();
            return true;
        }
        return false;
    }

    public function getProperExprs($criteria, $exprs) {
        if ($criteria instanceof TeaDbCriteria && isset($criteria->criteriaArr['join'])) {
            $criteriaJoin = $criteria->criteriaArr['join'];
        } else if (is_array($criteria) && isset($criteria['join'])) {
            $criteriaJoin = $criteria['join'];
        } else {
            $criteriaJoin = array();
        }
        if (empty($exprs) && !empty($criteriaJoin)) {
            $tableName = array($this->tableName());

            
        }
        return $exprs;
    }
    
    /**
     * Find a single record with the specified criteria.
     * @param mixed $criteria TeaDbCriteria instance or criteria array.
     * @param mixed $exprs Select exprs, string or array. If empty, it will be '*'.
     * @return mixed
     */
    public function find($criteria = array(), $exprs = null) {
        $this->onBeforeFind();
        $properCriteria = $this->getProperCriteria($criteria);
        $sql = $this->getDbSqlBuilder()->select($this->tableName(), $properCriteria, $this->getProperExprs($properCriteria, $exprs));
        $modelName = get_class($this);
        if ($this->_arrayResult) {
            $data = $this->getDbQuery()->query($sql)->fetchRow();
        } else {
            if ($modelName === 'TeaTempModel') {
                $data = $this->getDbQuery()->query($sql)->fetchObj($modelName, array($this->tableName()));
            } else {
                $data = $this->getDbQuery()->query($sql)->fetchObj($modelName);
            }
        }
        $this->_arrayResult = self::$config['arrayResult'];
        $this->onAfterFind();
        return $data;
    }

    /**
     * Find a single record by sql.
     * @param string $sql Sql statement.
     * @param array $params An array of values with as many elements as there are bound parameters in the sql being executed.
     * @return mixed
     */
    public function findBySql($sql, $params = array()) {
        $this->onBeforeFind();
        $modelName = get_class($this);
        if ($this->_arrayResult) {
            $data = $this->getDbQuery()->query($sql, $params)->fetchRow();
        } else {
            if ($modelName === 'TeaTempModel') {
                $data = $this->getDbQuery()->query($sql, $params)->fetchObj($modelName, array($this->tableName()));
            } else {
                $data = $this->getDbQuery()->query($sql, $params)->fetchObj($modelName);
            }
        }
        $this->_arrayResult = self::$config['arrayResult'];
        $this->onAfterFind();
        return $data;
    }

    /**
     * Find a single record with the condition array of criteria where.
     * @param array $condition Condition array of criteria where.
     * @param mixed $exprs Select exprs, string or array. If empty, it will be '*'.
     * @return mixed
     */
    public function findByCondition($condition = array(), $exprs = null) {
        $criteria = !empty($condition) ? array('where' => $condition) : null;
        return $this->find($criteria, $exprs);
    }
    
    /**
     * Find a single record with the specified primary key value.
     * @param mixed $pkVal Primary key value or array values for multiple primary keys.
     * @param mixed $exprs Select exprs, string or array. If empty, it will be '*'.
     * @return mixed
     */
    public function findByPk($pkVal, $exprs = null) {
        return $this->find($this->getPkCriteria($pkVal), $exprs);
    }

    /**
     * Get column value by row result and column name.
     * @param mixed $rowRst One row result object or array generated find-like method.
     * @param string $column String indicates fetching column name.
     * @return mixed
     */
    public function getColumnValue($rowRst, $column) {
        $modelName = get_class($this);
        if (is_array($rowRst) && is_string($column) && isset($rowRst[$column])) {
            $data = $rowRst[$column];
        } else if ($rowRst instanceof $modelName && is_string($column) && property_exists($rowRst, $column)) {
            $data = $rowRst->{$column};
        } else {
            $data = false;
        }
        return $data;
    }
    
    /**
     * Find all records with the specified criteria.
     * @param mixed $criteria TeaDbCriteria instance or criteria array.
     * @param mixed $exprs Select exprs, string or array. If empty, it will be '*'.
     * @return array
     */
    public function findAll($criteria = array(), $exprs = null) {
        $this->onBeforeFind();
        $properCriteria = $this->getProperCriteria($criteria);
        $sql = $this->getDbSqlBuilder()->select($this->tableName(), $properCriteria, $this->getProperExprs($properCriteria, $exprs));
        $modelName = get_class($this);
        if ($this->_arrayResult) {
            $data = $this->getDbQuery()->query($sql)->fetchRows();
        } else {
            if ($modelName === 'TeaTempModel') {
                $data = $this->getDbQuery()->query($sql)->fetchObjs($modelName, array($this->tableName()));
            } else {
                $data = $this->getDbQuery()->query($sql)->fetchObjs($modelName);
            }
        }
        $this->_arrayResult = self::$config['arrayResult'];
        $this->onAfterFind();
        return $data;
    }

    /**
     * Find all records by sql.
     * @param string $sql Sql statement.
     * @param array $params An array of values with as many elements as there are bound parameters in the sql being executed.
     * @return array
     */
    public function findAllBySql($sql, $params = array()) {
        $this->onBeforeFind();
        $modelName = get_class($this);
        if ($this->_arrayResult) {
            $data = $this->getDbQuery()->query($sql, $params)->fetchRows();
        } else {
            if ($modelName === 'TeaTempModel') {
                $data = $this->getDbQuery()->query($sql, $params)->fetchObjs($modelName, array($this->tableName()));
            } else {
                $data = $this->getDbQuery()->query($sql, $params)->fetchObjs($modelName);
            }
        }
        $this->_arrayResult = self::$config['arrayResult'];
        $this->onAfterFind();
        return $data;
    }

    /**
     * Find all records with the condition array of criteria where.
     * @param array $condition Condition array of criteria where.
     * @param mixed $exprs Select exprs, string or array. If empty, it will be '*'.
     * @return array
     */
    public function findAllByCondition($condition = array(), $exprs = null) {
        $criteria = !empty($condition) ? array('where' => $condition) : null;
        return $this->findAll($criteria, $exprs);
    }

    /**
     * Check whether a row exists with the specified criteria.
     * @param mixed $criteria TeaDbCriteria instance or criteria array.
     * @return bool
     */
    public function exists($criteria = array()) {
        $sql = $this->getDbSqlBuilder()->exists($this->tableName(), $this->getProperCriteria($criteria), 'exists');
        $existsVal = $this->findColumnBySql($sql, array(), 'exists');
        return intval($existsVal) === 1 ? true : false;
    }

    /**
     * Check whether a row exists with the specified primary key value.
     * @param mixed $pkVal Primary key value or array values for multiple primary keys.
     * @return bool
     */
    public function existsByPk($pkVal) {
        return $this->exists($this->getPkCriteria($pkVal));
    }

    /**
     * Hook method, invoking before find.
     */
    public function onBeforeFind() {
        if (method_exists($this, 'beforeFind')) {
            $this->beforeFind();
        }
    }

    /**
     * Hook method, invoking after find.
     */
    public function onAfterFind() {
        if (method_exists($this, 'afterFind')) {
            $this->afterFind();
        }
    }
    
    /**
     * Update record(s) with the specified criteria.
     * @param mixed $criteria TeaDbCriteria instance or criteria array.
     * @param array $vals An array indicates update data.
     * <pre>
     * It will be an array like this:
     * array(
     *     'colName1' => colVal1
     *     'colName2' => colVal2,
     *     ...
     * )
     * </pre>
     * @param bool $safe Safe update or not. If false, it will update all.
     * @return bool
     */
    public function update($criteria = array(), $vals = array(), $safe = true) {
        if (empty($vals)) {
            $vals = $this->getSetRecord();
        }
        if ($safe) {
            $criteria['limit'] = array(1);
        }
        $sql = $this->getDbSqlBuilder()->update($this->tableName(), $vals, $this->getProperCriteria($criteria));
        $this->onBeforeSave();
        if ($this->getDbQuery()->query($sql)->getRowCount() > 0) {
            $this->onAfterSave();
            return true;
        }
        return false;
    }

    /**
     * Update record(s) with the condition array of criteria where.
     * @param array $condition Condition array of criteria where.
     * @param array $vals An array indicates update data.
     * <pre>
     * It will be an array like this:
     * array(
     *     'colName1' => colVal1
     *     'colName2' => colVal2,
     *     ...
     * )
     * </pre>
     * @param bool $safe Safe update or not. If false, it will update all.
     * @return bool
     */
    public function updateByCondition($condition = array(), $vals = array(), $safe = true) {
        $criteria = array('where' => $condition);
        return $this->update($criteria, $vals, $safe);
    }
    
    /**
     * Update a single record with the specified primary key value.
     * @param mixed $pkVal Primary key value or array values for multiple primary keys.
     * @param array $vals An array indicates update data.
     * <pre>
     * It will be an array like this:
     * array(
     *     'colName1' => colVal1
     *     'colName2' => colVal2,
     *     ...
     * )
     * </pre>
     * @return bool
     */
    public function updateByPk($pkVal, $vals = array()) {
        return $this->update($this->getPkCriteria($pkVal), $vals);
    }

    /**
     * Increase record(s) column value with the specified criteria.
     * @param mixed $criteria TeaDbCriteria instance or criteria array.
     * @param string $colName Column name of the increment field.
     * @param int $val Value of increment, defaults to 1.
     * @param bool $safe Safe update or not. If false, it will update all.
     * @return bool
     */
    public function inc($criteria, $colName, $val = 1, $safe = true) {
        $expr = $this->getDbSqlBuilder()->quoteColumn($colName) . ' + ' . $this->getDbQuery()->escape($val);
        $vals = array(
            $colName => new TeaDbExpr($expr)
        );
        return $this->update($this->getProperCriteria($criteria), $vals, $safe);
    }

    /**
     * Increase record(s) column value with the condition array of criteria where.
     * @param array $condition Condition array of criteria where.
     * @param string $colName Column name of the increment field.
     * @param int $val Value of increment, defaults to 1.
     * @param bool $safe Safe update or not. If false, it will update all.
     * @return bool
     */
    public function incByCondition($condition, $colName, $val = 1, $safe = true) {
        $criteria = array('where' => $condition);
        return $this->inc($criteria, $colName, $val, $safe);
    }

    /**
     * Increase a single record column value with the specified primary key value.
     * @param mixed $pkVal Primary key value or array values for multiple primary keys.
     * @param string $colName Column name of the increment field.
     * @param int $val Value of increment, defaults to 1.
     * @return bool
     */
    public function incByPk($pkVal, $colName, $val = 1) {
        return $this->inc($this->getPkCriteria($pkVal), $colName, $val);
    }

    /**
     * Save record(s). If record exists, it will perform update, else perform insert.
     * @param mixed $vals Value indicates the inserted data. See TeaModel::insert().
     * @return bool
     */
    public function save($vals = array()) {
        return $this->insert($vals, $vals);
    }

    /**
     * Hook method, invoking before save.
     */
    public function onBeforeSave() {
        if (method_exists($this, 'beforeSave')) {
            $this->beforeSave();
        }
    }

    /**
     * Hook method, invoking after save.
     */
    public function onAfterSave() {
        if (method_exists($this, 'afterSave')) {
            $this->afterSave();
        }
    }
    
    /**
     * Delete record(s) with the specified criteria.
     * @param mixed $criteria TeaDbCriteria instance or criteria array.
     * @param bool $safe Safe update or not. If false, it will update all.
     * @return bool 
     */
    public function delete($criteria = array(), $safe = true) {
        if ($safe) {
            $criteria['limit'] = array(1);
        }
        $sql = $this->getDbSqlBuilder()->delete($this->tableName(), $this->getProperCriteria($criteria));
        $this->onBeforeDelete();
        if ($this->getDbQuery()->query($sql)->getRowCount() > 0) {
            $this->onAfterDelete();
            return true;
        }
        return false;
    }

    /**
     * Delete record(s) with the condition array of criteria where.
     * @param array $condition Condition array of criteria where.
     * @param bool $safe Safe update or not. If false, it will update all.
     * @return bool 
     */
    public function deleteByCondition($condition = array(), $safe = true) {
        $criteria = is_array($condition) && !empty($condition) ? array('where' => $condition) : null;
        return $this->delete($criteria, $safe);
    }
    
    /**
     * Delete a single record with the specified primary key value.
     * @param mixed $pkVal Primary key value or array values for multiple primary keys.
     * @return bool 
     */
    public function deleteByPk($pkVal) {
        return $this->delete($this->getPkCriteria($pkVal));
    }

    /**
     * Hook method, invoking before delete.
     */
    public function onBeforeDelete() {

    }

    /**
     * Hook method, invoking after delete.
     */
    public function onAfterDelete() {

    }
    
    /**
     * Get the number of rows affected by the last INSERT, SELECT, UPDATE or DELETE statement.
     * @return int
     */
    public function getRowCount() {
        return $this->getDbQuery()->getRowCount();
    }
    
    /**
     * Get last insert id.
     * Notice: it is not support insert many rows at one time.
     * @return int Last insert id.
     */
    public function getLastInsertId() {
        return $this->getDbQuery()->getLastInsertId();
    }

    /**
     * Get last query sql statement.
     * @return string Sql statement.
     */
    public function getLastSql() {
        return $this->getDbQuery()->getLastSql();
    }

    /**
     * Get table column names.
     * @return array Table column names.
     */
    public function getColumnNames() {
        if (is_array($this->_colNames) && !empty($this->_colNames)) {
            return $this->_colNames;
        }
        return $this->_colNames = array_keys($this->getDbSchema()->getTableColumns($this->tableName()));
    }

    /**
     * Check whether the name is a column of the table.
     * @param string $name Name to be checked.
     * @return bool
     */
    public function isTableColumn($name) {
        return in_array($name, $this->getColumnNames()) ? true : false;
    }
    
    /**
     * Get 'PRIMARY' index column names.
     * @return array 'PRIMARY' index column names.
     */
    public function getPkColumnNames() {
        if (is_array($this->_pkColNames) && !empty($this->_pkColNames)) {
            return $this->_pkColNames;
        }
        return $this->_pkColNames = $this->getDbSchema()->getPkColumnNames($this->tableName());
    }
    
    /**
     * Get criteria array of the primary key value.
     * @param mixed $pkVal Primary key value or array values for multiple primary keys.
     * @return array Criteria array.
     * @throws TeaDbException If PRIMARY key columns and parameter 1 do not have an equal number of elements.
     */
    public function getPkCriteria($pkVal) {
        $criteria = array();
        $pkColNames = $this->getPkColumnNames();
        if (is_array($pkVal)) {
            if (count($pkColNames) !== count($pkVal)) {
                $pkValStr = implode(', ', $pkColNames);
                throw new TeaDbException("PRIMARY key columns array({$pkValStr}) and parameter 1 should have an equal number of elements.");
            }
            $where = array_combine($pkColNames, $pkVal);
            $criteria = array('where' => $where);
        } else {
            $criteria = array('where' => array($pkColNames[0] => $pkVal));
        }
        return $criteria;
    }

    /**
     * Get set record.
     * @return array
     */
    public function getSetRecord() {
        $properties = get_object_vars($this);
        $record = array();
        foreach ($properties as $property => $value) {
            if ($this->isTableColumn($property)) {
                $record[$property] = $value;
            }
        }
        return $record;
    }

    /**
     * Return proper criteria merged TeaModel::$_addonCriteriaArr with $userCriteria.
     * @param mixed $userCriteria User criteria to merge with.
     * @return mixed Proper criteria.
     */
    public function getProperCriteria($userCriteria) {
        if ($userCriteria instanceof TeaDbCriteria) {
            $userCriteriaArr = $userCriteria->criteriaArr;
            $criteria = ArrayHelper::mergeArray($this->_addonCriteriaArr, $userCriteriaArr);
        } else if (is_array($userCriteria) && !empty($userCriteria)) {
            $criteria = ArrayHelper::mergeArray($this->_addonCriteriaArr, $userCriteria);
        } else {
            $criteria = $this->_addonCriteriaArr;
        }
        $this->_addonCriteriaArr = array(); // clear after merge
        return $criteria;
    }

}